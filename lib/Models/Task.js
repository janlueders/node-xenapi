// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, Task, _, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:Task');

  Promise = require('bluebird');

  _ = require('lodash');

  Task = (function() {
    var session, xenAPI;

    session = void 0;

    xenAPI = void 0;


    /**
    * Construct Task
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   task - A JSON object representing this Task
    * @param      {String}   opaqueRef - The OpaqueRef handle to this Task
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function Task(_session, _task, _opaqueRef, _xenAPI) {
      this.cancel = bind(this.cancel, this);
      debug("constructor()");
      debug(_task, _opaqueRef);
      if (!_session) {
        throw Error("Must provide `session`");
      }
      if (!_task) {
        throw Error("Must provide `task`");
      }
      if (!_opaqueRef) {
        throw Error("Must provide `opaqueRef`");
      }
      if (!_xenAPI) {
        throw Error("Must provide `xenAPI`");
      }
      if (!(_task.allowed_operations && _task.status)) {
        throw Error("`task` does not describe a valid Task");
      }
      session = _session;
      xenAPI = _xenAPI;
      this.opaqueRef = _opaqueRef;
      this.uuid = _task.uuid;
      this.name = _task.name_label;
      this.description = _task.name_description;
      this.allowed_operations = _task.allowed_operations;
      this.status = _task.status;
      this.created = _task.created;
      this.finished = _task.finished;
      this.progress = _task.progress;
    }

    Task.prototype.cancel = function() {
      debug("cancel()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (!_.contains(_this.allowed_operations, Task.ALLOWED_OPERATIONS.CANCEL)) {
            reject(new Error("Operation is not allowed"));
            return;
          }
          return session.request("task.cancel", [_this.opaqueRef]).then(function(value) {
            debug(value);
            return resolve();
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    Task.STATUS = {
      PENDING: "pending",
      SUCCESS: "success",
      FAILURE: "failure",
      CANCELLING: "cancelling",
      CANCELLED: "cancelled"
    };

    Task.ALLOWED_OPERATIONS = {
      CANCEL: "cancel"
    };

    return Task;

  })();

  module.exports = Task;

}).call(this);

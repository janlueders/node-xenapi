// Generated by CoffeeScript 1.10.0
(function() {
  var GuestMetricsCollection, Promise, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:GuestMetricsCollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  GuestMetricsCollection = (function() {
    var GuestMetrics, createGuestMetricsInstance, session, xenAPI;

    GuestMetrics = void 0;

    session = void 0;

    xenAPI = void 0;

    createGuestMetricsInstance = function(guestmetrics, opaqueRef) {
      return new GuestMetrics(session, guestmetrics, opaqueRef, xenAPI);
    };


    /**
    * Construct GuestMetricsCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   GuestMetrics - Dependency injection of the GuestMetrics class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function GuestMetricsCollection(_session, _guestMetrics, _xenAPI) {
      this.findOpaqueRef = bind(this.findOpaqueRef, this);
      this.findUUID = bind(this.findUUID, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_guestMetrics) {
        throw Error("Must provide GuestMetrics");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      GuestMetrics = _guestMetrics;
    }


    /**
    * List all GuestMetrics
    * @return     {Promise}
     */

    GuestMetricsCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VM_guest_metrics.get_all_records").then(function(value) {
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            GuestMetrics = _.map(value, createGuestMetricsInstance);
            return resolve(_.filter(GuestMetrics, function(guestmetrics) {
              return guestmetrics;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    GuestMetricsCollection.prototype.findUUID = function(uuid) {
      debug("findUUID(" + uuid);
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.list().then(function(GuestMetrics) {
            var matchGuestMetricsuuid, matches;
            matchGuestMetricsuuid = function(guestmetrics) {
              if (guestmetrics.uuid === uuid) {
                return guestmetrics;
              }
            };
            matches = _.map(GuestMetrics, matchGuestMetricsuuid);
            return resolve(_.filter(matches, function(guestmetrics) {
              return guestmetrics;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    GuestMetricsCollection.prototype.findOpaqueRef = function(opaqueRef) {
      debug("findOpaqueRef(" + opaqueRef + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VM_guest_metrics.get_record", [opaqueRef]).then(function(value) {
            var template;
            if (!value) {
              reject();
            }
            template = createGuestMetricsInstance(value, opaqueRef);
            return resolve(template);
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return GuestMetricsCollection;

  })();

  module.exports = GuestMetricsCollection;

}).call(this);

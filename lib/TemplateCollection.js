// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, TemplateCollection, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:TemplateCollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  TemplateCollection = (function() {
    var Template, createTemplateInstance, session, xenAPI;

    Template = void 0;

    session = void 0;

    xenAPI = void 0;

    createTemplateInstance = function(template, opaqueRef) {
      if (template && template.is_a_template && !template.is_control_domain) {
        return new Template(session, template, opaqueRef, xenAPI);
      }
    };


    /**
    * Construct TemplateCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   Template - Dependency injection of the Template class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function TemplateCollection(_session, _Template, _xenAPI) {
      this.findOpaqueRef = bind(this.findOpaqueRef, this);
      this.findUUID = bind(this.findUUID, this);
      this.findNamed = bind(this.findNamed, this);
      this.listCustom = bind(this.listCustom, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_Template) {
        throw Error("Must provide Template");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      Template = _Template;
    }


    /**
    * List all Templates
    * @return     {Promise}
     */

    TemplateCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var query;
          query = 'field "is_a_template" = "true" and field "is_a_snapshot" = "false"';
          return session.request("VM.get_all_records_where", [query]).then(function(value) {
            var Templates;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Templates = _.map(value, createTemplateInstance);
            return resolve(_.filter(Templates, function(template) {
              return template;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    TemplateCollection.prototype.listCustom = function() {
      debug("listCustom()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var query;
          query = 'field "is_a_template" = "true" and field "is_a_snapshot" = "false"';
          return session.request("VM.get_all_records_where", [query]).then(function(value) {
            var Templates, filteredValues;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            filteredValues = _.mapValues(value, function(template) {
              if (!template.other_config.default_template) {
                return template;
              }
            });
            Templates = _.map(filteredValues, createTemplateInstance);
            return resolve(_.filter(Templates, function(template) {
              return template;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    TemplateCollection.prototype.findNamed = function(name) {
      debug("findNamed(" + name + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.list().then(function(templates) {
            var matchTemplateName, matches;
            matchTemplateName = function(template) {
              if (minimatch(template.name, name, {
                nocase: true
              })) {
                return template;
              }
            };
            matches = _.map(templates, matchTemplateName);
            return resolve(_.filter(matches, function(template) {
              return template;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    TemplateCollection.prototype.findUUID = function(uuid) {
      debug("findUUID(" + uuid + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var query;
          query = 'field "uuid"="' + uuid + '"';
          return session.request("VM.get_all_records_where", [query]).then(function(value) {
            var Templates, filtered;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Templates = _.map(value, createTemplateInstance);
            filtered = _.filter(Templates, function(template) {
              return template;
            });
            if (filtered.length > 1) {
              return reject("Multiple Templates for UUID " + uuid);
            } else {
              return resolve(filtered[0]);
            }
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    TemplateCollection.prototype.findOpaqueRef = function(opaqueRef) {
      debug("findOpaqueRef(" + opaqueRef + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VM.get_record", [opaqueRef]).then(function(value) {
            var template;
            if (!value) {
              reject();
            }
            template = createTemplateInstance(value, opaqueRef);
            return resolve(template);
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return TemplateCollection;

  })();

  module.exports = TemplateCollection;

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var MetricsCollection, Promise, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:MetricsCollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  MetricsCollection = (function() {
    var Metrics, createMetricsInstance, session, xenAPI;

    Metrics = void 0;

    session = void 0;

    xenAPI = void 0;

    createMetricsInstance = function(metrics, opaqueRef) {
      return new Metrics(session, metrics, opaqueRef, xenAPI);
    };


    /**
    * Construct MetricsCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   Metrics - Dependency injection of the Metrics class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function MetricsCollection(_session, _metrics, _xenAPI) {
      this.findOpaqueRef = bind(this.findOpaqueRef, this);
      this.findUUID = bind(this.findUUID, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_metrics) {
        throw Error("Must provide Metrics");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      Metrics = _metrics;
    }


    /**
    * List all Metrics
    * @return     {Promise}
     */

    MetricsCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VM_metrics.get_all_records").then(function(value) {
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Metrics = _.map(value, createMetricsInstance);
            return resolve(_.filter(Metrics, function(metrics) {
              return metrics;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    MetricsCollection.prototype.findUUID = function(uuid) {
      debug("findUUID(" + uuid);
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var query;
          query = 'field "uuid"="' + uuid + '"';
          return session.request("VM_metrics.get_all_records_where", [query]).then(function(value) {
            var filtered;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Metrics = _.map(value, createMetricsInstance);
            filtered = _.filter(Metrics, function(metrics) {
              return metrics;
            });
            if (filtered.length > 1) {
              return reject("Multiple Metrics for UUID " + uuid);
            } else {
              return resolve(filtered[0]);
            }
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    MetricsCollection.prototype.findOpaqueRef = function(opaqueRef) {
      debug("findOpaqueRef(" + opaqueRef + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VM_metrics.get_record", [opaqueRef]).then(function(value) {
            var metric;
            if (!value) {
              reject();
            }
            metric = createMetricsInstance(value, opaqueRef);
            return resolve(metric);
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return MetricsCollection;

  })();

  module.exports = MetricsCollection;

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, VBDCollection, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:VBDCollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  VBDCollection = (function() {
    var VBD, createVBDInstance, session, xenAPI;

    VBD = void 0;

    session = void 0;

    xenAPI = void 0;

    createVBDInstance = function(vbd, opaqueRef) {
      return new VBD(session, vbd, opaqueRef, xenAPI);
    };


    /**
    * Construct VBDCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   VBD - Dependency injection of the VBD class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function VBDCollection(_session, _VBD, _xenAPI) {
      this.findForVM = bind(this.findForVM, this);
      this.findOpaqueRef = bind(this.findOpaqueRef, this);
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_VBD) {
        throw Error("Must provide VBD");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      VBD = _VBD;
    }


    /**
    * List all VBDs
    * @return     {Promise}
     */

    VBDCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VBD.get_all_records").then(function(value) {
            var VBDs;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            VBDs = _.map(value, createVBDInstance);
            return resolve(_.filter(VBDs, function(vbd) {
              return vbd;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VBDCollection.prototype.create = function(vm, mode, type, vdi, userdevice) {
      debug("create()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var empty, newVBD, vbd, vdiRef;
          if (!vdi) {
            vdiRef = "OpaqueRef:NULL";
            empty = true;
          } else {
            vdiRef = vdi.opaqueRef;
            empty = false;
          }
          vbd = {
            VM: vm.opaqueRef,
            VDI: vdiRef,
            userdevice: userdevice,
            mode: mode,
            type: type,
            empty: empty
          };
          newVBD = new VBD(session, vbd, "OpaqueRef:NULL", xenAPI);
          return resolve(newVBD);
        };
      })(this));
    };

    VBDCollection.prototype.findOpaqueRef = function(opaqueRef) {
      debug("findOpaqueRef(" + opaqueRef + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("VBD.get_record", [opaqueRef]).then(function(value) {
            var template;
            if (!value) {
              reject();
            }
            template = createVBDInstance(value, opaqueRef);
            return resolve(template);
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    VBDCollection.prototype.findForVM = function(vm) {
      debug("findForVM()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var query;
          query = 'field "VM"="' + vm.opaqueRef + '"';
          return session.request("VBD.get_all_records_where", [query]).then(function(value) {
            var VBDs;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            VBDs = _.map(value, createVBDInstance);
            return resolve(_.filter(VBDs, function(vbd) {
              return vbd;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return VBDCollection;

  })();

  module.exports = VBDCollection;

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var ConsoleCollection, Promise, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:ConsoleCollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  ConsoleCollection = (function() {
    var Console, createConsoleInstance, session, xenAPI;

    Console = void 0;

    session = void 0;

    xenAPI = void 0;

    createConsoleInstance = function(console, opaqueRef) {
      return new Console(session, console, opaqueRef, xenAPI);
    };


    /**
    * Construct ConsoleCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   Console - Dependency injection of the Console class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function ConsoleCollection(_session, _console, _xenAPI) {
      this.findOpaqueRef = bind(this.findOpaqueRef, this);
      this.findUUID = bind(this.findUUID, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_console) {
        throw Error("Must provide Console");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      Console = _console;
    }


    /**
    * List all ConsoleCollection
    * @return     {Promise}
     */

    ConsoleCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("console.get_all_records").then(function(value) {
            var Consoles;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Consoles = _.map(value, createConsoleInstance());
            return resolve(_.filter(Consoles, function(consoles) {
              return consoles;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    ConsoleCollection.prototype.findUUID = function(uuid) {
      debug("findUUID(" + uuid);
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var query;
          query = 'field "uuid"="' + uuid + '"';
          return session.request("console.get_all_records_where", [query]).then(function(value) {
            var Consoles, filtered;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Consoles = _.map(value, createConsoleInstance);
            filtered = _.filter(Consoles, function(consoles) {
              return consoles;
            });
            if (filtered.length > 1) {
              return reject("Multiple Metrics for UUID " + uuid);
            } else {
              return resolve(filtered[0]);
            }
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    ConsoleCollection.prototype.findOpaqueRef = function(opaqueRef) {
      debug("findOpaqueRef(" + opaqueRef + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("console.get_record", [opaqueRef]).then(function(value) {
            var console;
            if (!value) {
              reject();
            }
            console = createConsoleInstance(value, opaqueRef);
            return resolve(console);
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return ConsoleCollection;

  })();

  module.exports = ConsoleCollection;

}).call(this);

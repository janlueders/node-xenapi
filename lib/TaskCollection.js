// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, TaskCollection, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:TaskCollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  TaskCollection = (function() {
    var Task, createTaskInstance, session, xenAPI;

    Task = void 0;

    session = void 0;

    xenAPI = void 0;

    createTaskInstance = function(task, opaqueRef) {
      var error;
      try {
        return new Task(session, task, opaqueRef, xenAPI);
      } catch (error) {
        return null;
      }
    };


    /**
    * Construct TaskCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   Task - Dependency injection of the Task class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function TaskCollection(_session, _Task, _xenAPI) {
      this.show = bind(this.show, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_Task) {
        throw Error("Must provide Task");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      Task = _Task;
    }


    /**
     * List all Tasks
     * @return     {Promise}
     */

    TaskCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("task.get_all_records").then(function(value) {
            var Tasks;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Tasks = _.map(value, createTaskInstance);
            return resolve(_.filter(Tasks, function(task) {
              return task;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };


    /**
     * Show Task by UUID
     * @param		{String}	uuid - The UUID of the Task to show.
     * @return		{Promise}
     */

    TaskCollection.prototype.show = function(uuid) {
      debug("list(" + uuid + ")");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("task.get_by_uuid", [uuid]).then(function(opaqueRef) {
            if (!opaqueRef) {
              reject();
            }
            return session.request("task.get_record", [opaqueRef]).then(function(task) {
              var newTask;
              if (!task) {
                reject();
              }
              debug(task);
              newTask = null;
              try {
                return newTask = new Task(session, task, opaqueRef);
              } finally {
                resolve(newTask);
              }
            })["catch"](function(e) {
              debug(e);
              return reject(e);
            });
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return TaskCollection;

  })();

  module.exports = TaskCollection;

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var PoolCollection, Promise, _, debug, minimatch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('XenAPI:PoolCollection');

  Promise = require('bluebird');

  minimatch = require('minimatch');

  _ = require('lodash');

  PoolCollection = (function() {
    var Pool, createPoolInstance, session, xenAPI;

    Pool = void 0;

    session = void 0;

    xenAPI = void 0;

    createPoolInstance = function(pool, opaqueRef) {
      return new Pool(session, pool, opaqueRef, xenAPI);
    };


    /**
    * Construct PoolCollection
    * @class
    * @param      {Object}   session - An instance of Session
    * @param      {Object}   Pool - Dependency injection of the Pool class.
    * @param      {Object}   xenAPI - An instance of XenAPI
     */

    function PoolCollection(_session, _Pool, _xenAPI) {
      this.findUUID = bind(this.findUUID, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_Pool) {
        throw Error("Must provide Pool");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      Pool = _Pool;
    }


    /**
    * List all Pools
    * @return     {Promise}
     */

    PoolCollection.prototype.list = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("pool.get_all_records").then(function(value) {
            var Pools;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Pools = _.map(value, createPoolInstance);
            return resolve(_.filter(Pools, function(pool) {
              return pool;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    PoolCollection.prototype.findUUID = function(uuid) {
      debug("findUUID(" + uuid);
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.list().then(function(Pools) {
            var filtered, matchPooluuid, matches;
            matchPooluuid = function(pool) {
              if (pool.uuid === uuid) {
                return pool;
              }
            };
            matches = _.map(Pools, matchPooluuid);
            filtered = _.filter(matches, function(pool) {
              return pool;
            });
            if (filtered.length > 1) {
              return reject("Multiple Pools for UUID " + uuid);
            } else {
              return resolve(filtered[0]);
            }
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return PoolCollection;

  })();

  module.exports = PoolCollection;

}).call(this);

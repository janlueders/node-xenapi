// Generated by CoffeeScript 1.10.0
(function() {
  var Host, Promise, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('Host');

  Promise = require('bluebird');

  APIClient = (function() {

    /**
    * Construct APIClient
    * @class
    * @param      {Object}   xmlrpc
    * @param      {Object}   options - for connecting to the API
    * @param      {String}   options.host - The host the API is being served on
    * @param      {String}   options.port - The port the API is being served on
     */
    function Host(_session, _console, _xenAPI) {
      this.findOpaqueRef = bind(this.findOpaqueRef, this);
      this.findUUID = bind(this.findUUID, this);
      this.list = bind(this.list, this);
      debug("constructor()");
      if (!_session) {
        throw Error("Must provide session");
      }
      if (!_console) {
        throw Error("Must provide Console");
      }
      if (!_xenAPI) {
        throw Error("Must provide xenAPI");
      }
      session = _session;
      xenAPI = _xenAPI;
      Console = _console;
    }


    Host.prototype.metrics = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("host_metrics.get_all").then(function(value) {
            var Consoles;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Consoles = _.map(value, createConsoleInstance());
            return resolve(_.filter(Consoles, function(consoles) {
              return consoles;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };
    
    Host.prototype.metrics = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("host_metrics.get_all_records").then(function(value) {
            var Metrics;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Metrics = _.map(value, createConsoleInstance());
            return resolve(_.filter(Metrics, function(metrics) {
              return metrics;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };
    
    Host.prototype.cpu = function() {
      debug("list()");
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return session.request("host_cpu.get_all_records").then(function(value) {
            var CPUS;
            if (!value) {
              reject();
            }
            debug("Received " + (Object.keys(value).length) + " records");
            Consoles = _.map(value, createConsoleInstance());
            return resolve(_.filter(CPUS, function(cpu) {
              return cpu;
            }));
          })["catch"](function(e) {
            debug(e);
            return reject(e);
          });
        };
      })(this));
    };

    return Host;

  })();

  module.exports = Host;

}).call(this);
